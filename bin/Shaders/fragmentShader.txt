#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Colour;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

void main(void){

	vec3 unitSurfaceNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	vec3 unitCameraVector = normalize(toCameraVector);
	
	// diffuse Lightning
	float dotProduct = dot(unitSurfaceNormal, unitLightVector);
	float brightness = max(dotProduct , 0.0);
	vec3 diffuse = brightness * lightColour;
	
	//specular Lightning
	vec3 unitLightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(unitLightDirection, unitSurfaceNormal);
	float specularFactor = dot(reflectedLightDirection, unitCameraVector);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 specular = dampedFactor * reflectivity * lightColour;
	
	out_Colour = vec4(diffuse, 1.0) * texture(textureSampler, pass_textureCoords) + vec4(specular, 1.0);
}

